program scriptTemplate;

{$DEFINE SMART}              // Always have this to load smart
{$I SRL-6/SRL.simba}         // To load the SRL include files
{$I SPS/lib/SPS-RS3.Simba}   // To load the SPS include files

var
  failtimer, failtimer2, waitTimer, energyTimer, mainloopTimer: TTimeMarker;
  i, x, y, prevXP, totalBreakTime:  integer;
  cursedWispRift, cursedWispLocation, gotovarrockwest,
  lodeToWisp1, lodeToWisp2: TSPSArea;
  cursedWispTPA, cursedWispTPA1, cursedWispTPA2, riftTPA, siphonTPA, fishSpotTPA: TPointArray;
  playerBox, playerBox1, riftBox, siphonBoundsBox, wildyLevelBox, aBox: TBox;
  cursedWispATPA, riftATPA, siphonATPA, fishSpotATPA: T2DPointArray;
  riftOption, riftText, wispText:  TStringArray;
  p: TPoint;
  weTeleported, weShouldTeleport: boolean;

{$I ginclude/master.simba}


const
  fishSpotColor = 12364699;
  fishSpotTol = 15;
  fishSpotHue = 0.3;
  fishSpotSat = 0.68;

  language = 'english';

  //name1 = 'superm4n57@outlook.com';
  //pass1 = 'nc8xaso2asd';
  //name1 = 'goodg8y103@outlook.com';
  //pass1 = 'sdaklnj2kdad';
  name1 = 'isthatwutuj@outlook.com';
  pass1 = 'df4t4tdryt7';
  world1 = 8;
  weShouldExitToLobby = false;
  minRiftLength = 5000;

  //out of 100
  chanceOfMinibreaksInbetweenSiphons = 80;
  chanceOfBreaksInbetweenSiphons = 1;
  chanceOfBreaksBeforeDepositing = 2;
  chanceOfMinibreaksAfterDepositing = 50;
  chanceOfBreaksAfterDepositing = 2;

  siphonColor = 13665320;
  siphonTol   = 25;
  siphonHue   = 0.07;
  siphonSat   = 0.75;

procedure declarePlayers();
begin
  setLength(players, 1);
  with players[0] do
  begin
    loginName := name1;
    password := pass1;
    isActive := true;
    isMember := true;
    world := world1;
  end;
  currentPlayer := 0;
end;

function TRSMinimap.waitFlag1(dist: integer = 0): boolean;
var
  m, t : LongWord;
  d1, d2: integer;
  p, c: TPoint;
begin
  result := false;
  m := getSystemTime();
  t := (m + 20000);

  repeat
    if (not self.isFlagPresent(p)) then
    begin
      result := true;
      break;
    end;

    c := self.getCenterPoint();
    d1 := distance(p.x, p.y, c.x, c.y);

    if (d1 <= dist) then
    begin
      result := true;
      break;
    end;

    teleCheck;
    if weTeleported then
      exit;

    if (d1 > (dist + 12)) then
      wait(450 + random(70))
    else
      wait(50 + random(50));

    if (getColor(6, 56) <> 13092807) then // border of the loading message
      if (getSystemTime() - m > 5000) then
      begin
        if (d1 = d2) then
          break();


        d2 := d1;
        m := getSystemTime();
      end;

    {
    if (SRL_Events[EVENT_ANTIBAN] <> nil) then
      SRL_Events[EVENT_ANTIBAN]();
    }

  until (getSystemTime() > t);
end;

function TSPSArea.getPlayerPos1(tolerance: integer = 300; accuracy: extended = 0.4): TPoint;
var
  foundMatches, wid, hei, t: integer;
  bmp: TMufasaBitmap;
  map: T3DIntegerArray;
  p: TPoint;
  searches, a: extended;
begin
  result := [-1, -1];

  if (not isLoggedIn()) then
    exit();

  if (not self.isSetup) then
  begin
    print('Unable to get players postion, sps isn''t setup', TDebug.ERROR);
    exit();
  end;

  t := getSystemTime();
  a := minimap.getAngleDegrees();

  if (inRange(a, 10.0, 350.0)) and (not spsAnyAngle) then
  begin
    print(self.getName()+'.getPlayerPos1(): Angle is at '+floatToStr(a)+', Setting angle to 0 degrees');
    minimap.clickCompass();
  //  mainScreen.setAngle(MS_ANGLE_HIGH);
  end;

  bmp := SPS_GatherMinimap(spsAnyAngle, a);

  wid := bmp.getWidth();
  hei := bmp.getHeight();

  SPS_BitmapToMap(bmp, self._accuracy, map);

  if (length(map) > 0) then
  begin
    foundMatches := SPS_FindMapInMap(p.x, p.y, self.__areaMap, map, tolerance);
    searches := ((wid / self._accuracy) * (hei / self._accuracy));

    if ((foundMatches / searches) > accuracy) then
    begin
      result.x := (p.x * self._accuracy + (wid div 2));
      result.y := (p.y * self._accuracy + (wid div 2));
    end else
      print(self.getName()+'.getPlayerPos1(): Didn''t find enough matches accurately calc your postion', TDebug.WARNING);
  end;

  bmp.free();

  print(self.getName()+'.getPlayerPos1(): result = ' + toStr(result) + ', took ' + intToStr(getSystemTime() - t) + ' ms');
end;

function TSPSArea.walkPath1(path: TPointArray; waitMoving: Boolean = False; shiftInterval: Integer = 500): boolean;
var
  p, lastPos, mmPoint: TPoint;
  t, fails, h, l, i: integer;
begin
  result := false;;

  h := high(path);
  l := low(path);

  t := (getSystemTime() + randomRange(15000, 20000));

  repeat
    if (not isLoggedIn()) then
      exit(false);

    p := self.getPlayerPos1();

    for i := h downto l do
      if (SPS_PosToMM(path[i], p, mmPoint)) then
      begin
        if (distance(minimap.getCenterPoint(), mmPoint) >= 10) then
        begin
          if (spsMultiMouse) then
            multiClick(mmPoint, 25, 3)
          else
            mouse(mmPoint, MOUSE_LEFT);

          if (minimap.isFlagPresent(2500 + random(500))) then
            minimap.waitFlag1(10 + random(25));
        end;

        t := (getSystemTime() + randomRange(15000, 20000));

        result := (i = h) or (distance(path[i], path[h]) < 10);

        if (result) then
          break(2)
        else
          break();

      end;

    if (p.x = lastPos.x) and (p.y = lastPos.y) then
      inc(fails);

    lastPos := p;

  until (getSystemTime() > t) or (fails > 5);

  if waitMoving then
    if (minimap.isFlagPresent() or minimap.isPlayerMoving()) then
      minimap.waitPlayerMoving(shiftInterval);

  print(self.getName()+'.walkPath(): result = '+boolToStr(result));
end;

function TSPSArea.walkPath2(path: TPointArray; waitMoving: Boolean = False; shiftInterval: Integer = 500): boolean;
var
  p, lastPos, mmPoint: TPoint;
  t, fails, h, l, i: integer;
begin
  result := false;;

  h := high(path);
  l := low(path);

  t := (getSystemTime() + randomRange(15000, 20000));

  repeat
    if (not isLoggedIn()) then
      exit(false);

    p := self.getPlayerPos1();

    for i := h downto l do
      if (SPS_PosToMM(path[i], p, mmPoint)) then
      begin
        if (distance(minimap.getCenterPoint(), mmPoint) >= 10) then
        begin
          if (spsMultiMouse) then
            multiClick(mmPoint, 25, 3)
          else
            mouse(mmPoint, MOUSE_LEFT);

          if (minimap.isFlagPresent(2500 + random(500))) then
            minimap.waitFlag(10 + random(25));
        end;

        t := (getSystemTime() + randomRange(15000, 20000));

        result := (i = h) or (distance(path[i], path[h]) < 10);

        if (result) then
          break(2)
        else
          break();

      end;

    if (p.x = lastPos.x) and (p.y = lastPos.y) then
      inc(fails);

    lastPos := p;

  until (getSystemTime() > t) or (fails > 5);

  if waitMoving then
    if (minimap.isFlagPresent() or minimap.isPlayerMoving()) then
      minimap.waitPlayerMoving(shiftInterval);

  print(self.getName()+'.walkPath(): result = '+boolToStr(result));
end;

function TSPSArea.blindWalk1(pos: TPoint): boolean;
var
  tries: integer;
  ctrlPoints: TPointArray;
  p: TPoint;
begin
  result := false;

  repeat
    if (not isLoggedIn()) then
      exit();

    p := self.getPlayerPos1();

    inc(tries);

    if ((tries) > 10) then
      break();
  until (not p.equals([-1, -1]));

  if (tries <= 10) then
  begin
    ctrlPoints := TPABetweenPoints(p, pos, 15 + random(25), 15);
    result := self.walkPath1(ctrlPoints);
  end;

  print(self.getName()+'.blindWalk1(): result = '+boolToStr(result));
end;

function TSPSArea.blindWalk2(pos: TPoint): boolean;
var
  tries: integer;
  ctrlPoints: TPointArray;
  p: TPoint;
begin
  result := false;

  repeat
    if (not isLoggedIn()) then
      exit();

    p := self.getPlayerPos1();

    inc(tries);

    if ((tries) > 10) then
      break();
  until (not p.equals([-1, -1]));

  if (tries <= 10) then
  begin
    ctrlPoints := TPABetweenPoints(p, pos, 15 + random(25), 15);
    result := self.walkPath2(ctrlPoints);
  end;

  print(self.getName()+'.blindWalk1(): result = '+boolToStr(result));
end;

procedure terminator();
begin
  writeln('Ayyy we terminating, screenshot writing to C:\Simba\debug.png');
  saveScreenshot('C:\Simba\debug.png');
  //PlaySound('C:\Users\R1\Downloads\custom2slayertaskdone');
  if weShouldExitToLobby then
    players[0].exitToLobby;
end;

procedure loginProcedure();
begin
  if not isLoggedIn() then
  begin             // If player isn't logged in then
    players[currentPlayer].login();    // Log them in
    waitForCompass;
  end;

  if ((minimap.getAngleDegrees > 5) and (minimap.getAngleDegrees < 355)) then
    begin
      writeLn('Setting Compass');
      minimap.clickCompass;
      mainScreen.setAngle(MS_ANGLE_HIGH);
      wait(randomrange(650, 1250));
    end;
  exitTreasure;
  claimTicket;
  closePopup;
end;

procedure setupLanguage();
begin
  Case language Of
    //english
    'english':
    begin
      riftOption    := ['to ene'];
      wispText      := ['arves', 'ronic'];   //instead of 'wisp'
      riftText      := ['Conv'];
    end;
    //german
    'german':
    begin
      riftOption    := ['In En'];
      wispText      := ['Verf'];
      riftText      := ['Erinn'];
    end;
    //portugal
    'portugal':
    begin
      riftOption    := ['ia Fi'];
      wispText      := ['Fogo'];
      riftText      := ['Fiss'];
    end;
    //french
    'french':
    begin
      riftOption    := ['ie Fa'];
      wispText      := ['Sph'];
      riftText      := ['Conv'];
    end;
  end;
  writeln('Selected language: ', language, ' ******Uptext As Follows*******',riftOption, wispText, riftText);
end;

procedure setupVariables();
begin
  cursedWispRift.setup('cursedWispRift', RUNESCAPE_SURFACE);

  lodeToWisp1.setup('lodeToWisp1', RUNESCAPE_SURFACE);
  lodeToWisp2.setup('lodeToWisp2', RUNESCAPE_SURFACE);

  gotovarrockwest.setup('gotovarrockwest', RUNESCAPE_SURFACE);

  //cursedWispLocation.setup('cursedWispLocation', RUNESCAPE_SURFACE);
  setupLanguage();
  searchBox1.setBounds(35, 532, 93, 547);
  wildyLevelBox.setBounds(505, 26, 573, 45);
  playerBox.setBounds(206, 120, 360, 270);
  playerBox1.setBounds(266, 169, 306, 215);

  totalBreakTime := 0;
end;

procedure setup();
begin
  clearDebug();               // Clear the debug box
  smartEnableDrawing := true; // So we can draw on SMART
  declarePlayers();             // Set up your username/pass
  smartShowConsole := false;        //
  disableIPScreenshots := true;
  disableSRLLog := true;
  addOnTerminate('terminator');
  setupSRL();                   // Load the SRL include files
  loginProcedure();
  setupVariables();
end;

procedure wildyBreakTime(miniBreak: boolean);
var
  howLongToBreakFor: integer;
  wildyBreakTimer: TTimeMarker;
  weLogging: boolean;
begin
  if weTeleported then
    exit;

  if minibreak then
  case RandomRange(1, 1000) of
    1..100: howLongToBreakFor := gaussRangeInt(1, 601);
    101..200: howLongToBreakFor := gaussRangeInt(1, 601);
    201..300: howLongToBreakFor := gaussRangeInt(601, 1201);
    301..400: howLongToBreakFor := gaussRangeInt(1201, 2401);
    401..500: howLongToBreakFor := gaussRangeInt(1201, 2401);
    501..600: howLongToBreakFor := gaussRangeInt(1801, 2401);
    601..700: howLongToBreakFor := gaussRangeInt(2401, 3001);
    701..800: howLongToBreakFor := gaussRangeInt(3001, 4201);
    801..900: howLongToBreakFor := gaussRangeInt(4201, 9001);
    901..1000: howLongToBreakFor := gaussRangeInt(9001, 15001);
  end else  //3.2 second wait on average?
  case RandomRange(1, 1000) of
    1..100: howLongToBreakFor := gaussRangeInt(100, 60100);
    101..200: howLongToBreakFor := gaussRangeInt(100, 60100);
    201..300: howLongToBreakFor := gaussRangeInt(60100, 120100);
    301..400: howLongToBreakFor := gaussRangeInt(120100, 240100);
    401..500: howLongToBreakFor := gaussRangeInt(120100, 240100);
    501..600: howLongToBreakFor := gaussRangeInt(180100, 240100);
    601..700: howLongToBreakFor := gaussRangeInt(240100, 300100);
    701..800: howLongToBreakFor := gaussRangeInt(300100, 420100);
    801..900: howLongToBreakFor := gaussRangeInt(420100, 900100);
    901..1000: howLongToBreakFor := gaussRangeInt(900100, 1500100);
  end;      //5.4 minute wait on average?

  weLogging := false;
  if ((howLongToBreakFor > gaussRangeInt(9500, 18500)) or (not miniBreak)) then
    weLogging := true;

  wildyBreakTimer.start;
  smartImage.clear;

  totalBreakTime := totalBreakTime + howLongToBreakFor;

  if weLogging then
  begin
    players[currentPlayer].exitToLobby();
    writeln('weLogging is: ', weLogging, ' and we are going to be waiting for ', howLongToBreakFor/1000, ' seconds');
    wait(howLongToBreakFor + 1);
    loginProcedure;
  end else
    writeln('weLogging is: ', weLogging, ' and we are going to be waiting for ', howLongToBreakFor/1000, ' seconds');

  repeat
    teleCheck;
    if weTeleported then
      break;
    wait(gaussRangeInt(50, 200));
  until (wildyBreakTimer.getTime > howLongToBreakFor);
end;

//**********************************************************
// - finds wisp colours and puts it into tpa
// - converts the tpa into atpa and filters points to closest aswell as ones too small
//**********************************************************
function findWisp(): boolean;
begin
  loginProcedure;

  if (not findColorsTolerance(cursedWispTPA1, 6460618, mainScreen.getBounds, 15, ColorSetting(2, 0.26, 2.41)) and (not findColorsTolerance(cursedWispTPA2, 11887459, mainScreen.getBounds, 10, colorSetting(2, 0.52, 1.52)))) then
  begin
    writeln('Could not find wisps, returning false and exiting');
    exit(false);
  end;

  writeln('Found Wisps');
  if ((length(cursedWispTPA1) > 0) and (length(cursedWispTPA2) > 0)) then
  begin
    writeln('merger time');
    cursedWispTPA1.combine(cursedWispTPA2);
    cursedWispTPA := cursedWispTPA1.copy;
  end else
  begin
    writeln('not merger time');
    if length(cursedWispTPA1) > 0 then
      cursedWispTPA := cursedWispTPA1.copy else
      cursedWispTPA := cursedWispTPA2.copy;
  end;

  writeln('turning cursedWispTPA into an ATPA');
  cursedWispATPA := cursedWispTPA.toATPA(20, 20);      //converts the wisps in TPA to ATPA
  cursedWispATPA.filterBetween(0, 10);           //filter points too small to be wisps
  if length(cursedWispATPA) < 1 then
    exit(false);

  writeln('filtering out player & wildyLevel Boxes from ATPA results');
  for i := high(cursedWispATPA) downto 0 do
  begin
    if playerBox.overlap(cursedWispATPA[i].getBounds) then
      cursedWispATPA.deleteIndex(i);
    if wildyLevelBox.overlap(cursedWispATPA[i].getBounds) then
      cursedWispATPA.deleteIndex(i);
  end;

  if length(cursedWispATPA) > 0 then         //checks if ATPA is presen
    cursedWispATPA.sortFromMidPoint(mainscreen.playerPoint) else         //sorts to closest to player
    exit(false);

  smartImage.debugATPA(cursedWispATPA);

  exit(true);
end;

function findNearestSiphon(): boolean;
begin
  minimap.waitPlayerMoving;

  if not findColorsTolerance(siphonTPA, siphonColor, playerBox, siphonTol, colorSetting(2, siphonHue, siphonSat)) then
    exit(false);

  siphonATPA := siphonTPA.toATPA(35);
  siphonATPA.filterBetween(0, 100);
  siphonATPA.sortBySize(true);

  for i := high(siphonATPA) downto 0 do
  begin
    if playerBox1.isPointInside(siphonATPA[i].getBounds.getMiddle) then
      siphonATPA.deleteIndex(i);
  end;

  writeln('test');
  if length(siphonATPA) < 1 then
    exit(false);

  smartImage.DebugATPA(siphonATPA);

  siphonBoundsBox.setBounds(siphonATPA[0].getBounds.x1 - 5, siphonATPA[0].getBounds.y1 - 5, siphonATPA[0].getBounds.x2 + 5, siphonATPA[0].getBounds.y2 + 5);

  result := true;
end;

function findSiphonParam(): boolean;
begin
  writeln('siphonBoundsBox is: ', siphonBoundsBox);
  smartImage.drawBox(siphonBoundsBox, true, clred);

  if findColorsTolerance(siphonTPA, siphonColor, siphonBoundsBox, siphonTol, colorSetting(2, siphonHue, siphonSat)) then
    exit(true);
end;

//**********************************************************
// - waits for random amount of time within parameter range
//      @parameter "minWait"
//                 > minimum time to wait
//      @parameter "maxWait"
//                 > maximum time to wait
//**********************************************************
procedure siphonWait({minWait: integer});
begin
  mouseOffClient(OFF_CLIENT_RIGHT);
  writeln('waiting for waitflag to go away @ siphonWait');
  minimap.waitFlag1;

  {
  waitTimer.start;
  repeat
    teleCheck();
    if weTeleported then
      break;
    wait(gaussRangeInt(100, 200));
  until (waitTimer.getTime > minWait);
  }

  repeat
    writeln('checking for change in exp while gathering memories');
    prevXP := getXP;
    if not boolBeforeTimeWildy(, , 2400, 3600, @xpChanged) then
      break;
  until false;
  {
  findNearestSiphon;
  repeat
    if (expCheck = 0) then
      oldExp := getXP;
    inc(expCheck);

    if expCheck > 25 then
      if (oldExp = getXP) then
      begin
        writeln('oldExp is = to getXP so we breaking');
        break;
      end else
      begin
        expCheck := 0;
        oldExp := getXP;
      end;

    teleCheck();
    if weTeleported then
      break;
    if tabBackpack.isFull then
      break;
    wait(gaussRangeInt(100, 200));
  until ((not findSiphonParam) or (waitTimer.getTime > maxWait));
  if waitTimer.getTime > maxWait then
    scriptTerminator('siphonWait took longer than maxWait');
  }
end;

procedure depositWait();
begin
  mouseOffClient(OFF_CLIENT_RIGHT);
  minimap.waitFlag1;

  repeat
    writeln('checking for change in exp while depositing memories');
    prevXP := getXP;
    if not boolBeforeTimeWildy(, , 3000, 4200, @xpChanged) then
      break;
  until false;
  {
  failtimer.start;
  repeat
    prevXP := getXP;
    waitTimer.start;
    repeat
      teleCheck();
      if weTeleported then
        break;
      wait(gaussRangeInt(50, 200));
    until ((prevXP <> getXP) or (waitTimer.getTime > gaussRangeInt(2450, 3650)));
  until ((prevXP = getXP) or (failtimer.getTime > 100000));
  if (failtimer.getTime > 100000) then
    scriptTerminator('took longer than 100k ms for depositWait to work properly wtf??');
  }
end;

//**********************************************************
// - checks if rift on mainscreen, if is return true else return false
//**********************************************************
function isRiftOnMS(): boolean;
begin
  loginProcedure;
  if not findColorsTolerance(riftTPA, 7920825, mainScreen.getBounds, 14, ColorSetting(2, 0.37, 1.22)) then
  begin
    writeln('rift not found on mainscreen');
    exit(false);
  end else
  begin
    if length(riftTPA) < minRiftLength then     //if tpa of rift isn't big enough then return false
    begin
      writeln('rift found, but area too small');
      exit(false);
    end;
    writeln('found the rift on mainscreen');
    exit(true);
  end;
end;

procedure walkToRift(XforceWalk: boolean = false);
var
  riftTimer: TTimeMarker;
  p: TPoint;
begin
  riftTimer.start;

  if not XforceWalk then
    if isRiftOnMS then
      exit;

  if (minimap.findSymbol(p, MM_SYMBOL_DIVINATION, minimap.getBounds)) then
  BEGIN
    smartImage.drawCircle(p, 3, true, clwhite);
    p.X := p.X + gaussRangeInt(20, 30);
    p.Y := p.Y + gaussRangeInt(1, 16);
    writeln('1p is:', p);
    moveMouse(p);
    fastClick(mouse_Left);
  end else
  begin
    repeat
      cursedWispRift.blindWalk1([gaussRangeInt(127, 133), gaussRangeInt(181, 187)]);           //tries to walk to rift for 20 seconds
    until ((minimap.findSymbol(p, MM_SYMBOL_DIVINATION, minimap.getBounds)) or (riftTimer.getTime > 20000));       // if not found rift terminate
    if riftTimer.getTime > 20000 then
      scriptTerminator('riftTimer is greater than 20000');
    smartImage.drawCircle(p, 3, true, clwhite);
    p.X := p.X + gaussRangeInt(20, 30);
    p.Y := p.Y + gaussRangeInt(1, 16);
    writeln('2p is:', p);
    moveMouse(p);
    fastClick(mouse_Left);
  end;

  minimap.waitFlag1;
end;

//*************************************************************
//      add in a check to see if successfully clicked the wisp
//*************************************************************
function clickWisp(): boolean;
begin
  prevXP := getXP;

  failtimer.start;
  for i := 0 to high(cursedWispATPA) do
  begin
    if failtimer.getTime > gaussRangeInt(1150, 2450) then
    begin
      writeln('took longer than ~2 seconds to find uptext? :(');
      exit(false);
    end;

    teleCheck;
    if weTeleported then
      exit(false);

    moveMouse(MiddleTPA(cursedWispATPA[i]));
    if not isMouseOverText(wispText, RandomRange(250, 650)) then
      continue; //if uptext is not found, it starts over again at the top of the loop

    //uptext was found so we're not using continue
    fastClick(mouse_Left);
    result := true;
    break; //exiting the loop
  end;
end;

function clickRift(debug: boolean; waitBefore: boolean = false): boolean;
begin
  //walkToRift;

  if waitBefore then
    minimap.waitPlayerMoving;

  if (not isRiftOnMS) then
    exit(false);

  riftATPA := riftTPA.toATPA(15);
  riftATPA.sortFromMidPoint(mainScreen.getCenterPoint);

  if debug then
  begin
    smartImage.clear;
    smartImage.debugATPA(riftATPA);
  end;

  for i := 0 to high(riftATPA) do
  begin
    moveMouse(MiddleTPA(riftATPA[i]));
    if isMouseOverText(riftText) then
      break;
    if (i < high(riftATPA)) then
      continue;
    scriptTerminator('failed to click rift after each atpa? maybe change this w/ an exit(false)');
  end;

  wait(gaussRangeInt(250, 400));
  fastClick(mouse_Right);
  wait(gaussRangeInt(250, 400));

  if not chooseOption.optionsExist(riftoption) then
    wait(gaussRangeInt(650, 900));

  if not chooseOption.select(riftOption) then
    exit(false);

  result := true;
end;

procedure teleToLodestone();
var
  options: TOptionArray;
  result, prevDest: boolean;
  filter: TTesseractFilter;
  randomTime: integer;
begin
  writeln('teleporting to wildy lodestone');
  failTimer.start;

  mouseCircle(minimap.button[MM_BUTTON_LODESTONE].center.x, minimap.button[MM_BUTTON_LODESTONE].center.y,
              minimap.button[MM_BUTTON_LODESTONE].radius, MOUSE_MOVE);
  fastClick(mouse_Right);

  chooseOption.isOpen(gaussRangeInt(3600, 4800));

  options := chooseOption.getOptions;
  result := length(Options) = 3;
  if not (result) then
    scriptTerminator('length of Options was not = to 3');

  //future moo problem asdf

  if (not chooseOption.__select(['ilder', 'olcan'], mouse_left, false, 1.00, 1250, false, filter)) then
  //if (not chooseOption.select(['ilder', 'olcan'], gaussRangeInt(1250, 2450))) then
  begin
    chooseOption.select(['elepo'], gaussRangeInt(1250, 2450));

    failtimer2.start;
    repeat
      wait(RandomRange(300, 900));
    until ((lodestoneScreen.isOpen) or (failtimer2.getTime > 10000));
    if failtimer2.gettime > 10000 then
      scriptTerminator('took longer than 10000 for lodestoneScreen to open up?');

    lodestoneScreen.teleportTo(LOCATION_WILDERNESS);
  end;

  repeat
    wait(gaussRangeInt(300,900));
  until ((conversationBox.isOpen) or (failTimer.getTime > 45000));
  if failTimer.getTime > 45000 then
    scriptTerminator('could not get past tele chat warning dialog');

  if conversationBox.isOpen then
  begin
    conversationBox.continue(true, true);

    randomTime := gaussRangeInt(1250, 2450);
    failtimer2.start;
    repeat
      wait(gaussRangeInt(200, 400));
    until ((failtimer2.getTime > randomTime) or (conversationBox.findOption(['Yes'])));
    if failtimer2.getTime > randomTime then
      conversationBox.continue(true, true);
  end;

  repeat
    wait(gaussRangeInt(200, 400));
  until ((conversationBox.findOption(['Yes'])) or (failTimer.getTime > 45000));
  if failTimer.getTime > 45000 then
    scriptTerminator('where da yes at homie?? terminating');

  if (conversationBox.selectOption(1)) then
    wait(gaussRangeInt(18000, 27000));

  mouseOffClient(OFF_CLIENT_RIGHT);
  wait(gaussrangeint(16500, 20000));
end;

procedure lodeStoneToWisps();
begin
  writeln('walking to wisps from the lodestone');
  lodeToWisp1.walkPath2([Point(198, 208), Point(252, 180), Point(289, 128), Point(260, 70)]);
  lodeToWisp2.walkPath([Point(173, 218), Point(143, 164), Point(114, 103)]);
  if (not minimap.findSymbol(p, MM_SYMBOL_DIVINATION, minimap.getBounds)) then
  begin
    writeln('div symbol not found, blindwalking once');
    lodeToWisp2.blindWalk2([100+random(10), 105+random(10)]);
  end;
end;

procedure walkToVarrockWestBankfromGrandExchangeEntrance();
begin
  writeln('initiating blind walk to V West');
  gotovarrockwest.blindWalk([194, 163]);
end;

procedure usePreset1();
begin
  writeln('using preset1');

  typesend('1', false);
  if not boolBeforeTime2(,, 3600, 4800, @tabBackpack.isOpen) then
  begin
    bankScreen.clickButton(BANK_BUTTON_PRESET_1, false);
    if not boolBeforeTime2(,,3600, 4800, @tabBackpack.isOpen) then
      scriptTerminator('failed to use Preset 1');
  end;
  writeln('used preset1');
  {
  failtimer.start;
  repeat
    wait(gaussRangeInt(150, 350));
  until ((bankScreen.isOpen) or (failtimer.getTime > 15000));
  if failtimer.getTime > 15000 then
    scriptTerminator('took longer than 15000 for bank screen to open');

  wait(gaussRangeInt(150, 350));
  typesend('1', false);

  repeat
    wait(gaussRangeInt(150, 350));
  until ((not bankScreen.isOpen) or (failtimer.getTime > 15000));
  if failtimer.getTime > 15000 then
    scriptTerminator('took longer than 15000 for bank screen to go away');

  wait(gaussRangeInt(150, 350));
  }
end;

procedure openBank();
begin
  writeln('opening up the bank');
  if not getVarrockWestBankOnMS( , true, , ) then
    if not getVarrockWestBankOnMS( , , true) then
      if not getVarrockWestBankOnMS( , , , true) then
        scriptTerminator('failed to open up varrock west bank three times, terminating');
end;

function shouldNotHealUpBoolFunc(): boolean;
begin
  result := (actionBar.getHPPercent > 99);
end;

procedure healUp();
begin
  writeln('healing up');
  if not shouldNotHealUpBoolFunc then
    holdkey( , 51, gaussrangeint(6600, 9200), @shouldNotHealUpBoolFunc);
end;

procedure bankingTime(weShouldTeleport: boolean);
begin
  writeln('bankingTime! weShouldTeleport is set to: ', weShouldTeleport);

  if weShouldTeleport then
    teleAway;

  walkToVarrockWestBankfromGrandExchangeEntrance;
  openBank;
  usePreset1;

  teleToLodestone();
  lodeStoneToWisps; //not reliable
  healUp; //perhaps should eat all instead
end;

{
deprecated
}
procedure caseLodeToWisp();
begin
  case lodeToWisp2.getPlayerPos1(300, 0.4).y of
    -1: scriptTerminator('111lodeToWisp2 getplayerPos messed up fam, terminating.');
    0..75: lodeToWisp2.blindWalk1([100+random(10), 105+random(10)]);
    76..124:
    begin
      mouse(minimap.getDots(MM_DOT_NPC, minimap.getBounds).getMiddle, mouse_left);
      minimap.waitFlag1;
    end;
    125..175: lodeToWisp2.blindWalk1([100+random(10), 105+random(10)]);
    176..350: lodeToWisp2.blindWalk1([100+random(10), 105+random(10)]);
    351..1000: scriptTerminator('222lodeToWisp2 getplayerPos messed up fam, terminating.');
  end;
end;

procedure getDemMemories();
var
  hopCount, blindWalkCount: integer;
begin
  if tabBackpack.isFull then
    exit;

  writeln('backpack was not full, let''s get dem memories');

  hopCount := 0;
  blindWalkCount := 0;

  writeln('starting to fill up inventory');
  repeat
    smartImage.clear;

    writeln('checking for a 80% chance of exitting inventory filling loop if inv count is > 23');
    if tabBackpack.count > 23 then
      if randomrange(1, 100) < 80 then
        break;

    if weTeleported then
      break;

    while (not minimap.findSymbol(p, MM_SYMBOL_DIVINATION, minimap.getBounds)) do
    begin
      writeln('did not find div symbol on MM');
      {
      if blindWalkCount > 15 then
        scriptTerminator('we''ve tried to blindwalk over 15 times this inv?? terminating');
      inc(blindWalkCount);
      }
      failsafeWalk;
    end;

    if (not findWisp) then
    begin
      writeln('did not findWisp on MS');
      if blindWalkCount > 15 then
        scriptTerminator('we''ve tried to blindwalk over 15 times this inv?? terminating');
      inc(blindWalkCount);

      if not (length(minimap.getDots(MM_DOT_NPC, minimap.getBounds)) > 5) then
      begin
        inc(hopCount);
        if hopCount > 5 then
          scriptTerminator('we''ve hopped over 5 times this inv?? terminating');
        if not players[currentPlayer].switchToWorld then
          players[currentPlayer].switchToWorld(117);
        wait(gaussrangeint(650, 1250));
        loginProcedure;
      end;

      caseLodeToWisp;
      continue;
    end else
      if not clickWisp then
        continue else
        begin
          if boolBeforeTime(,,,, @redAroundMouse) then
            writeln('red around mouse found succesfully, continuing!') else
            begin
              writeln('red not found around mouse succesfully, not continuing!');
              continue;
            end;
        end;

    siphonWait({2000});

    if randomrange(1, 100) < chanceOfMinibreaksInbetweenSiphons then
      wildyBreakTime(true);
    if randomrange(1, 100) < chanceOfBreaksInbetweenSiphons then
      wildyBreakTime(false);

  until tabBackpack.isFull;

  if randomrange(1, 100) < chanceOfBreaksBeforeDepositing then
    wildyBreakTime(false);
end;

procedure depositDemMemories();
begin
  writeln('let''s deposit dem memories');
  smartImage.clear;

  if weTeleported then
    exit;

  walkToRift;

  if weTeleported then
    exit;

  if not clickRift(false) then
  begin
    walkToRift(true);

    if weTeleported then
      exit;

    if not clickRift(false, true) then
      if not clickRift(false, true) then
        scriptTerminator('failed to click rift 3x');
  end;

  if weTeleported then
    exit;

  depositWait;

  if randomrange(1, 100) < chanceOfMinibreaksAfterDepositing then
    wildyBreakTime(true);
  if randomrange(1, 100) < chanceOfBreaksAfterDepositing then
    wildyBreakTime(false);

  if not findWisp then
    lodeToWisp2.walkPath1([point(105, 113)]);
end;

procedure collectEnergies(maxMinutes: integer);
begin
  energyTimer.start;
  repeat
    writeln('let''s get dem energies');

    if weTeleported then
      break;

    getDemMemories;

    if weTeleported then
      break;

    depositDemMemories;
  until ((energyTimer.getTime/60000) > maxMinutes);
  teleAway;
end;

procedure cursedEnergiesScript(minsToRunFor: integer; leaveAfter: boolean);
begin
  mainloopTimer.start;

  setup();
  resetFolder('C:\Simba\teleportPics');

  if not minimap.findSymbol(p, MM_SYMBOL_DIVINATION, minimap.getBounds) then
    bankingTime(true);

  repeat
    weTeleported := false;
    writeln('lets start getting energies');
    collectEnergies(gaussRangeInt(15, 40));
    bankingTime(false);
  until ((mainloopTimer.getTime/60000) > minsToRunFor);

  writeln('cursedEnergiesScript = done. leaveAfter is set to: ', leaveAfter);
  if leaveAfter then
    teleAway;
end;

function findCrayFish(): boolean;
var
  fishSpotBox: Tbox;
begin
  fishSpotBox.setBounds(300, 3, 570, 380);

  if not findColorsTolerance(fishSpotTPA, fishSpotColor, fishSpotBox, fishSpotTol, colorSetting(2, fishSpotHue, fishSpotSat)) then
    exit(false);

  fishSpotATPA := fishSpotTPA.toATPA(25, 25);

  for i := high(fishSpotATPA) downto 0 do
  begin
    smartImage.debugTPA(fishSpotATPA[i], true);
    writeln(length(fishSpotATPA[i]));
    if (length(fishSpotATPA[i]) < 20) then
    begin
      writeln('deleting');
      fishSpotATPA.deleteIndex(i);
    end;
  end;

  if length(fishSpotATPA) < 1 then
    exit(false);

  fishSpotATPA.sortFromMidPoint(mainScreen.getCenterPoint);
  smartImage.clear;
  smartImage.debugATPA(fishSpotATPA);

  result := true;
end;

function clickCrayFish(): boolean;
var
  isMouseOverr: Boolean;
begin
  isMouseOverr := false;
  failtimer.start;

  for i := 0 to high(fishSpotATPA) do
  begin
    mouse(fishSpotATPA[i].getBounds.getGaussPoint, mouse_move);
    wait(gaussRangeInt(250, 400));
    if isMouseOverText(['age', 'ishi'], 1250) then
    begin
      isMouseOverr := true;
      break;
    end;
  end;

  if not isMouseOverr then
    exit(false);

  if RandomRange(1, 100) < 80 then
    wait(gaussRangeInt(150, 350));

  fastClick(mouse_Left);
  if not redAroundMouse then
    exit(false);

  result := true;
  mouseOffClient(OFF_CLIENT_RIGHT);
end;

procedure randomWaitTimez();
begin
  if RandomRange(1, 100) < 20 then
    wait(gaussRangeInt(1250, 3050));
  if RandomRange(1, 100) < 80 then
    wait(RandomRange(50, 6050));
end;

function TRSConversationBox.isOpen1(): boolean;
var
  t: LongWord;
begin
  writeln('let''s do this!!');
  t := (getSystemTime() + 0);
  repeat
    if (self.x1 - self.x2 = 0) then
      result := self.__find() else
      if (countColorTolerance(9021887, self.getBounds(), 35) > 15000) then  // color of the paper like background.
      begin
        writeln('countColorTolerance(9021887, self.getBounds(), 35) is: ', countColorTolerance(9021887, self.getBounds(), 35));
        exit(true);
      end else
        writeln('countColorTolerance(9021887, self.getBounds(), 35) is: ', countColorTolerance(9021887, self.getBounds(), 35));

    wait(20 + random(20));
  until (getSystemTime() >= t) or (result);
  writeln('result is: ', result);
end;

procedure clearConv();
begin
  writeln('clearing conv');
  if conversationBox.isOpen then
  begin
    conversationBox.continue(true, false, true);
    writeln('waiting for conversation box to not be open');
    if not waitTypeFunc(@conversationBox.isOpen1, 300, 15000, false) then
      scriptTerminator('failed waiting for conversation box to not be open');
    if RandomRange(1, 100) < 69 then
      wait(gaussRangeInt(123, 1234));
    if RandomRange(1, 100) < 69 then
      wait(gaussRangeInt(123, 1234));
    writeln('conversation is not open');
  end;
end;

procedure waitWhileFishing();
var
  depositEarly: boolean;
  invCount: integer;
begin
  depositEarly := false;

  writeln('waiting while fishing');
  minimap.waitPlayerMoving;

  if (RandomRange(1, 100) < 1) then
  begin
    invCount := gaussRangeInt(15, 26);
    writeln('depositing early this inv, at invCount of: ', invCount);
    depositEarly := true;
  end;

  repeat
    {
    if conversationBox.isOpen1 then
      break;
    }
    {
    prevXP := getXP;
    if not boolBeforeTime(,, 3600, 4200, @xpChanged) then
      break;  }
    if not xpChanged2 then
      break;
    if depositEarly then
      if tabBackpack.count > invCount then
        break;
  until false;

  clearConv;

  writeln('done waiting while fishing');
  if depositEarly then
    holdkey2(gaussRangeInt(250, 900), RandomRange(50, 52), RandomRange(10000, 10001), @tabBackpack.isEmpty);

  if ((not depositEarly) and (tabBackpack.isFull)) then
  begin
    randomWaitTimez;
    clearConv;
    holdkey2(gaussRangeInt(250, 900), RandomRange(50, 52), RandomRange(10000, 10001), @tabBackpack.isEmpty);
  end;
end;

procedure test();
begin
end;

begin
  //cursedEnergiesScript(randomrange(360, 720), false);
  setup;
  //writeln('findCrayFish is: ', findCrayFish);

  repeat
    clearConv;
    boolBeforeTime(,,,50000, @findCrayFish);
    if not tabBackpack.isFull then
      if not xpChanged2 then
        if not clickCrayFish then
          scriptTerminator('failed to click cray fish, terminating');
    waitWhileFishing;
  until false;

  {
  prevXP := getXP;
  writeln('has xp changed is: ', boolBeforeTime(,,,, @xpChanged));


  if findWisp then
    if clickWisp then
      if boolBeforeTime(,,,, @redAroundMouse) then
        writeln('1');
  }
end.
